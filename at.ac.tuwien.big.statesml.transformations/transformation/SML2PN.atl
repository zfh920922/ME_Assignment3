-- @path SML=/at.ac.tuwien.big.statesml.transformations/metamodels/statesml.ecore
-- @nsURI PN=http://org.pnml.tools/epnk/pnmlcoremodel

module SML2PN;
create OUT : PN from IN : SML;

rule StateSys2PN {
	from
		i1 : SML!StateSystem
	to 
		o0 : PN!PetriNetDoc(
			net <- o1	
		),
		o1 : PN!PetriNet(
			id <- 'PN1deee',
			name <- n1,
			page <- p
		),
		n1 : PN!Name(
		    text<- i1.name    
		),
    	p : PN!Page(
    	    name<- n2,
    	    object<- i1.nodes-> union(i1.edges),
    	    id<- 'P1' 
    	),
		n2 : PN!Name(
		    text<- 'MainPage')
}

rule State2Placeinitial --extends DynamicEObject2Object
{
    from 
    state : SML!State (state.initial = true)
    to 
    place : PN!Place ( 
         id<- state.name.toLowerCase(),
         out<- state.outgoingEdges,   
         name<- thisModule.getName(state) 
)
}

rule State2Placeterminal --extends DynamicEObject2Object
{
    from 
    state : SML!State (state.terminal = true)
    to 
    place : PN!Place ( 
         id<- state.name.toLowerCase(),
         "in"<- state.incomingEdges,
         name<- thisModule.getName(state) 
)
}

rule State2Placenormal --extends DynamicEObject2Object
{
    from 
    state : SML!State (state.terminal = false and state.initial = false)
    to 
    place : PN!Place ( 
         id<- state.name.toLowerCase(),
        -- "in"<- state.incomingEdges,
          --out<- state.outgoingEdges,
         name<- thisModule.getName(state) 
)
}

rule Transition2Transtition --extends DynamicEObject2Object
{
    from 
        t : SML!Transition
    to 
    tn : PN!Transition (
        id<- t.name.toLowerCase(),
        --"in"<- t.incomingEdges,
        out<- t.outgoingEdges,
        name<- thisModule.getName(t)
      )
}

rule Edge2Arc {
    from 
    edge : SML!Edge (not edge.source.oclIsTypeOf(SML!SelectionConvergence) and not edge.source.oclIsTypeOf(SML!SelectionDivergence))
    to 
    a : PN!Arc (
    id<- edge.name.toLowerCase(),
    source<- edge.source--,
    --target<- edge.target
    )
}

--abstract rule DynamicEObject2Object{
--from 
--nodesml : ecore!EObject
--to 
--node : PN!Node()
--}

rule Convergence2PN --extends DynamicEObject2Object
{
from 
sc : SML!SelectionConvergence
to
pc : PN!Place(
name<- thisModule.getName(sc),
id<- sc.name.toLowerCase(),
"in"<- sc.incomingEdges--,
--out<- sc.outgoingEdges
)
}

rule convergenceOutgoingEdge2Arc {
    from 
    ecvg : SML!Edge(ecvg.source.oclIsTypeOf(SML!SelectionConvergence))
    to
   t : PN!Transition(
   id<- ecvg.source.gettransitioncvgName(),
   --name<- selectionCName,
    "in"<- arccvg,
   out<- arccvgg
),
    arccvg : PN!Arc(
     id<- 'aaaaaa',
     source<- ecvg.source,
     target<- t
   ),
 
   arccvgg : PN!Arc(
   source<- t,
   id<- 'bbbb',
   target<- ecvg.target
   )
}

lazy rule getName {
    from
    i: ecore!EObject
    to
    namesml : PN!Name(
      text<- i.name    
    )
}


helper context SML!SelectionConvergence def : gettransitioncvgName () : String = 
    'AddTrn4SC_'+self.name;
