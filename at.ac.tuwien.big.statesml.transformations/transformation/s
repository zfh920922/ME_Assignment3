helper context SML!State def : getEdgesIncoming () : OrderedSet(SML!Edge) = 
    if self.initial
    then OrderedSet{}
    else 
    self.incomingEdges
    endif;

helper context SML!State def : getEdgesOutgoing () : OrderedSet(SML!Edge) = 
    if self.terminal
    then OrderedSet{}
    else 
    self.outgoingEdges
    endif;
  
  
   --  "in"<- state.getEdgesIncoming(),
        --   out<- state.getEdgesOutgoing()  
        
        
          -- "in"<- t.incomingEdges,
         --  out<- t.outgoingEdges
         
         
          --  source<- edge.source,
 --   target<- edge.target
 
 
 --rule SelectionDivergence2PlaceWithTransition {
   -- from 
      --  sd : SML!SelectionDivergence
   -- to 
     --   psd : PN!Place (
      --  id<- sd.name,
       -- out<- t,
      --  in<- sd.incomingedge
     --   )
     --   t : PN!Transition (
            
     --   )
        
 arccvg1 : PN!Arc(
     id<- 'aaaaaa',
     source<- ecvg.source,
     target<- tcvg
   ),
    tcvg : PN!Transition(
    id<- ecvg.source.gettransitioncvgName(),
   --name<- selectionCName,
   "in"<- arccvg1,
   out<- arccvg2
),
arccvg2 : PN!Arc(
   source<- tcvg,
   target<- ecvg.target
   ),
--}